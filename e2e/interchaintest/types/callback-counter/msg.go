/* Code generated by github.com/srdtrk/go-codegen, DO NOT EDIT. */
package callbackcounter

type InstantiateMsg struct{}

// This is the execute message of the contract.
type ExecuteMsg struct {
	// The callback message from `cw-ica-controller`. The handler for this variant should verify that this message comes from an expected legitimate source.
	ReceiveIcaCallback *ExecuteMsg_ReceiveIcaCallback `json:"receive_ica_callback,omitempty"`
}

type QueryMsg struct {
	// GetCallbackCounter returns the callback counter.
	GetCallbackCounter *QueryMsg_GetCallbackCounter `json:"get_callback_counter,omitempty"`
}

/*
A human readable address.

In Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.

This type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.

This type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.
*/
type Addr string

// IbcChannel defines all information on a channel. This is generally used in the hand-shake process, but can be queried directly.
type IbcChannel struct {
	CounterpartyEndpoint IbcEndpoint `json:"counterparty_endpoint"`
	Endpoint IbcEndpoint `json:"endpoint"`
	Order IbcOrder `json:"order"`
	// Note: in ibcv3 this may be "", in the IbcOpenChannel handshake messages
	Version string `json:"version"`
	// The connection upon which this channel was created. If this is a multi-hop channel, we only expose the first hop.
	ConnectionId string `json:"connection_id"`
}

// IcaControllerCallbackMsg is the type of message that this contract can send to other contracts.
type IcaControllerCallbackMsg struct {
	// OnAcknowledgementPacketCallback is the callback that this contract makes to other contracts when it receives an acknowledgement packet.
	OnAcknowledgementPacketCallback *IcaControllerCallbackMsg_OnAcknowledgementPacketCallback `json:"on_acknowledgement_packet_callback,omitempty"`
	// OnTimeoutPacketCallback is the callback that this contract makes to other contracts when it receives a timeout packet.
	OnTimeoutPacketCallback *IcaControllerCallbackMsg_OnTimeoutPacketCallback `json:"on_timeout_packet_callback,omitempty"`
	// OnChannelOpenAckCallback is the callback that this contract makes to other contracts when it receives a channel open acknowledgement.
	OnChannelOpenAckCallback *IcaControllerCallbackMsg_OnChannelOpenAckCallback `json:"on_channel_open_ack_callback,omitempty"`
}

/*
A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.

# Examples

Use `from` to create instances of this and `u64` to get the value out:

``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);

let b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```
*/
type Uint64 string

// CallbackCounter tracks the number of callbacks in store.
type CallbackCounter struct {
	// The number of erroneous callbacks.
	Error int `json:"error"`
	// The number of successful callbacks.
	Success int `json:"success"`
	// The number of timeout callbacks. The channel is closed after a timeout due to the semantics of ordered channels.
	Timeout int `json:"timeout"`
}
type ExecuteMsg_ReceiveIcaCallback IcaControllerCallbackMsg

/*
A point in time in nanosecond precision.

This type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.

## Examples

``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);

let ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```
*/
type Timestamp Uint64

// `Data` is the response to an ibc packet. It either contains a result or an error.
type Data struct {
	// Result is the result of a successful transaction.
	Result *Data_Result `json:"result,omitempty"`
	// Error is the error message of a failed transaction. It is a string of the error message (not base64 encoded).
	Error *Data_Error `json:"error,omitempty"`
}

// `TxEncoding` is the encoding of the transactions sent to the ICA host.
type TxEncoding string

const (
	// `Protobuf` is the protobuf serialization of the CosmosSDK's Any.
	TxEncoding_Proto3 TxEncoding = "proto3"
	// `Proto3Json` is the json serialization of the CosmosSDK's Any.
	TxEncoding_Proto3Json TxEncoding = "proto3json"
)

type IbcEndpoint struct {
	ChannelId string `json:"channel_id"`
	PortId string `json:"port_id"`
}

// IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)
type IbcTimeoutBlock struct {
	// block height after which the packet times out. the height within the given revision
	Height int `json:"height"`
	// the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)
	Revision int `json:"revision"`
}

type QueryMsg_GetCallbackCounter struct{}

type IbcPacket struct {
	// The raw data sent from the other side in the packet
	Data Binary `json:"data"`
	// identifies the channel and port on the receiving chain.
	Dest IbcEndpoint `json:"dest"`
	// The sequence number of the packet on the given channel
	Sequence int `json:"sequence"`
	// identifies the channel and port on the sending chain.
	Src IbcEndpoint `json:"src"`
	Timeout IbcTimeout `json:"timeout"`
}

// In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.
type IbcTimeout struct {
	Block *IbcTimeoutBlock `json:"block,omitempty"`
	Timestamp *Timestamp `json:"timestamp,omitempty"`
}

// IbcOrder defines if a channel is ORDERED or UNORDERED Values come from https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/core/channel/v1/channel.proto#L69-L80 Naming comes from the protobuf files and go translations.
type IbcOrder string

const (
	IbcOrder_OrderUnordered IbcOrder = "ORDER_UNORDERED"
	IbcOrder_OrderOrdered   IbcOrder = "ORDER_ORDERED"
)

/*
Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.

This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.
*/
type Binary string

type Data_Error string

type IcaControllerCallbackMsg_OnAcknowledgementPacketCallback struct {
	// The deserialized ICA acknowledgement data
	IcaAcknowledgement Data `json:"ica_acknowledgement"`
	// The original packet that was sent
	OriginalPacket IbcPacket `json:"original_packet"`
	// The relayer that submitted acknowledgement packet
	Relayer Addr `json:"relayer"`
}

type IcaControllerCallbackMsg_OnTimeoutPacketCallback struct {
	// The original packet that was sent
	OriginalPacket IbcPacket `json:"original_packet"`
	// The relayer that submitted acknowledgement packet
	Relayer Addr `json:"relayer"`
}

type IcaControllerCallbackMsg_OnChannelOpenAckCallback struct {
	// The channel that was opened.
	Channel IbcChannel `json:"channel"`
	// The address of the interchain account that was created.
	IcaAddress string `json:"ica_address"`
	// The tx encoding this ICA channel uses.
	TxEncoding TxEncoding `json:"tx_encoding"`
}
type Data_Result Binary
